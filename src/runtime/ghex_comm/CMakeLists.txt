if(NOT _ghex_already_fetched)
  find_package(GHEX QUIET)
endif()
if(NOT GHEX_FOUND)
  set(_ghex_repository "https://github.com/ghex-org/GHEX.git")
  set(_ghex_tag        "6eb91410d5c01d36a70f0eb106c1f065df3cee9f")
  if(NOT _ghex_already_fetched)
    message(STATUS "Fetching GHEX ${_ghex_tag} from ${_ghex_repository}")
  endif()
  include(FetchContent)
  FetchContent_Declare(
    ghex
    GIT_REPOSITORY ${_ghex_repository}
    GIT_TAG        ${_ghex_tag}
  )
  if(_gtbench_cuda_enabled)
    set(GHEX_USE_GPU ON CACHE INTERNAL "")
    set(GHEX_GPU_TYPE "NVIDIA" CACHE INTERNAL "")
  endif()
  FetchContent_MakeAvailable(ghex)
  set(_ghex_already_fetched ON CACHE INTERNAL "")
endif()

compile_as_cuda(run.cpp TARGET_DIRECTORY runtime)
target_sources(runtime PRIVATE run.cpp)
target_link_libraries(runtime PUBLIC GHEX::lib)
if(GHEX_TRANSPORT_BACKEND STREQUAL "LIBFABRIC")
  target_link_libraries(runtime PUBLIC oomph::libfabric)
elseif(GHEX_TRANSPORT_BACKEND STREQUAL "UCX")
  target_link_libraries(runtime PUBLIC oomph::ucx)
elseif(GHEX_TRANSPORT_BACKEND STREQUAL "MPI")
  target_link_libraries(runtime PUBLIC oomph::mpi)
endif()
target_compile_options(runtime PUBLIC "$<$<COMPILE_LANGUAGE:CUDA>:SHELL:--default-stream per-thread>")

if(GHEX_USE_XPMEM)
    target_compile_definitions(runtime PRIVATE GHEX_USE_XPMEM)
endif()
